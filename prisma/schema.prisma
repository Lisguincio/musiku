generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_userId_user_id_fk")

  @@id([provider, providerAccountId], map: "account_provider_providerAccountId_pk")
}

model link {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  content     String?
  author      String
  ownerId     String
  releaseDate DateTime? @db.Timestamp(6)
  published   Boolean   @default(false)
  coverImage  String?
  links       Json[]    @db.Json
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @db.Timestamp(6)
  user        user      @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "link_ownerId_user_id_fk")
}

model session {
  sessionToken String   @id
  userId       String
  expires      DateTime @db.Timestamp(6)
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "session_userId_user_id_fk")
}

model user {
  id            String    @id(map: "User_pkey")
  name          String?
  email         String
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  role          String    @default("user")
  password      String?   @db.VarChar(256)
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  account       account[]
  link          link[]
  session       session[]
}

model verificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamp(6)

  @@id([identifier, token], map: "verificationToken_identifier_token_pk")
}
